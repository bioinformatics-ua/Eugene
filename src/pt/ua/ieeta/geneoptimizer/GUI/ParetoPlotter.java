/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlotterRedesignSelector.java
 *
 * Created on 1/Abr/2011, 14:26:46
 */

package pt.ua.ieeta.geneoptimizer.GUI;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.util.Random;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import pt.ua.ieeta.geneoptimizer.GeneRedesign.OptimizationSolution;
import pt.ua.ieeta.geneoptimizer.GeneRedesign.OptimizationSolutionSet;

/**
 *
 * @author Paulo
 */
public class ParetoPlotter extends JPanel implements ChartMouseListener
{
    /** Creates new form PlotterRedesignSelector */
    public ParetoPlotter(OptimizationSolutionSet solutionSet)
    {
        initComponents();

        assert solutionSet != null;

        this.solutionSet = solutionSet;
        this.currentRedesignIndex1 = 0;
        this.currentRedesignIndex2 = 1;
        this.currentSelectedSolutionIndex = solutionSet.getBestSolutionIndex();
        
        for (String name : solutionSet.getRedesignNames())
        {
            this.jComboBox1.addItem(name);
            this.jComboBox2.addItem(name);
        }

        this.jComboBox1.setSelectedIndex(0);
        this.jComboBox2.setSelectedIndex(1);

        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));

        redesignChart();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("X Axis:");

        jLabel2.setText("Y Axis:");

        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        this.setSelectedMethods(jComboBox1.getSelectedIndex(), jComboBox2.getSelectedIndex());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        this.setSelectedMethods(jComboBox1.getSelectedIndex(), jComboBox2.getSelectedIndex());
    }//GEN-LAST:event_jComboBox2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

  private JFreeChart localJFreeChart;
  private ChartPanel localChartPanel;
  private OptimizationSolutionSet solutionSet;

  private int currentRedesignIndex1 = 0, currentRedesignIndex2 = 1;
  
  private int currentSelectedSolutionIndex;

  private void redesignChart()
  {
    /* Clear all components from window. */
    jPanel1.removeAll();

    /* Create chart with data from the solution set. The first measures are chosen for each solution. */
    localJFreeChart = createChart(solutionSet.getPlotDataSet(currentRedesignIndex1, currentRedesignIndex2));
    localChartPanel = new ChartPanel(localJFreeChart);

    /* Enable mouse wheel. */
    localChartPanel.setMouseWheelEnabled(true);

    /* Add listener to control user interaction. */
    localChartPanel.addChartMouseListener(this);

    /* Size of the chart. */
    localChartPanel.setPreferredSize(new Dimension(300, 300));

    jPanel1.add(localChartPanel);
    jPanel1.updateUI();
  }

  private JFreeChart createChart(XYDataset paramXYDataset)
  {
    JFreeChart localFreeChart = ChartFactory.createScatterPlot("Plotting Pareto Solutions",
                                                                "", //solutionSet.getNameOfRedesign(currentRedesignIndex1),
                                                                "", //solutionSet.getNameOfRedesign(currentRedesignIndex2),
                                                                paramXYDataset, PlotOrientation.VERTICAL, true, true, false);
    localFreeChart.clearSubtitles();
    localFreeChart.setBackgroundPaint(new GradientPaint(0.0F, 0.0F, new Color(240,240,240), 350.0F, 0.0F, new Color(240,240,240), true));

    XYPlot localXYPlot = (XYPlot)localFreeChart.getPlot();
    localXYPlot.setDomainCrosshairVisible(true);
    localXYPlot.setRangeCrosshairVisible(true);
    localXYPlot.setNoDataMessage("NO DATA");
    localXYPlot.setDomainPannable(true);
    localXYPlot.setRangePannable(true);
    localXYPlot.setDomainZeroBaselineVisible(true);
    localXYPlot.setRangeZeroBaselineVisible(true);
    localXYPlot.setDomainGridlineStroke(new BasicStroke(0.0F));
    localXYPlot.setDomainMinorGridlineStroke(new BasicStroke(0.0F));
    localXYPlot.setDomainGridlinePaint(Color.blue);
    localXYPlot.setRangeGridlineStroke(new BasicStroke(0.0F));
    localXYPlot.setRangeMinorGridlineStroke(new BasicStroke(0.0F));
    localXYPlot.setRangeGridlinePaint(Color.blue);
    localXYPlot.setDomainMinorGridlinesVisible(true);
    localXYPlot.setRangeMinorGridlinesVisible(true);

    XYLineAndShapeRenderer localXYLineAndShapeRenderer = (XYLineAndShapeRenderer)localXYPlot.getRenderer();
    localXYLineAndShapeRenderer.setSeriesOutlinePaint(0, Color.black);
    localXYLineAndShapeRenderer.setUseOutlinePaint(true);

    NumberAxis localNumberAxis1 = (NumberAxis)localXYPlot.getDomainAxis();
    //localNumberAxis1.setAutoRangeIncludesZero(false);
    localNumberAxis1.setTickMarkInsideLength(2.0F);
    localNumberAxis1.setTickMarkOutsideLength(2.0F);
    localNumberAxis1.setMinorTickCount(2);
    localNumberAxis1.setMinorTickMarksVisible(true);
    localNumberAxis1.setLowerBound(0);
    localNumberAxis1.setUpperBound(100);

    NumberAxis localNumberAxis2 = (NumberAxis)localXYPlot.getRangeAxis();
    localNumberAxis2.setTickMarkInsideLength(2.0F);
    localNumberAxis2.setTickMarkOutsideLength(2.0F);
    localNumberAxis2.setMinorTickCount(2);
    localNumberAxis2.setMinorTickMarksVisible(true);
    localNumberAxis2.setLowerBound(0);
    localNumberAxis2.setUpperBound(100);

    return localFreeChart;
  }

  public void setSelectedMethods(int selectedIndex1, int selectedIndex2)
  {
      if ((selectedIndex1 != currentRedesignIndex1) || (selectedIndex2 != currentRedesignIndex2))
      {
            /* Avoid initialization errors: when the form starts, the combo box selected index is "-1" by default. */
            if (selectedIndex1 < 0) selectedIndex1 = 0;
            if (selectedIndex2 < 0) selectedIndex2 = 1;

            currentRedesignIndex1 = selectedIndex1;
            currentRedesignIndex2 = selectedIndex2;

            redesignChart();
      }
  }

  public void chartMouseClicked(ChartMouseEvent cme)
  {
        ChartEntity localChartEntity = cme.getEntity();

        if ((localChartEntity != null) && ((localChartEntity instanceof XYItemEntity)))
        {
              XYItemEntity entity = (XYItemEntity) cme.getEntity();
              double X = entity.getDataset().getXValue(entity.getSeriesIndex(), entity.getItem());
              double Y = entity.getDataset().getYValue(entity.getSeriesIndex(), entity.getItem());

              currentSelectedSolutionIndex = entity.getItem();
        }
   }

    public void chartMouseMoved(ChartMouseEvent cme) {}


    public static void main(String[] paramArrayOfString) throws InterruptedException
    {
        /* Create a random set for testing. */
        OptimizationSolutionSet set = new OptimizationSolutionSet();
        Random rand = new Random();
        for (int i=0; i<5; i++)
        {
            OptimizationSolution solution = new OptimizationSolution("Solution" + i);
            for (int j=0; j<5; j++)
                solution.addRedesignScore("Redesign"+j, 80 + 10*rand.nextFloat());

            set.addSolution(solution);
        }

        ParetoPlotter plotter = new ParetoPlotter(set);
        
        JFrame frame = new JFrame();
        JPanel panel = new JPanel();

        panel.add(plotter);
        frame.add(panel);

        frame.pack();
        frame.setVisible(true);
    }
}
